<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduktion til Python til Dataanalyse</title>
    <link>/</link>
    <description>Recent content on Introduktion til Python til Dataanalyse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data og datasæt</title>
      <link>/data/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/data/data/</guid>
      <description>I disse Python lektioner gennemgås, hvordan Python anvendes til dataanalyse, men hvad er data overhovedet for noget?
Som udgangspunkt arbejder vi med en meget bred forståelse af data: alle former for information om noget. Grunden til at der i dag er så meget snak om data, dataanalyse, maskinlæring osv., er fordi at stadig mere og mere information digitaliseres, hvorfor det kan gøres til genstand for analyser.
Navn, alder, uddannelse, indkomst, yndlingsfilm, mest aflyttede sange i 2020, antal gange rejst med bus 2 i Aalborg, køb i supermarkeder, størrelse på bolig, indbo, brug af el, varme og vand osv.</description>
    </item>
    
    <item>
      <title>Deskriptive mål</title>
      <link>/udforsk/deskriptive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/udforsk/deskriptive/</guid>
      <description>Én måde at udforske et datasæt er ved at se nærmere på forskellige deskriptive mål for variable i datasættet.
Metoden .describe() danner deskriptive mål for alle (kompatible) variable i datasættet:
ess2014.describe() {[{TABLE 2}]}
Metoden fungerer også på enkeltvariable:
ess2014[&amp;#39;weight&amp;#39;].describe() count 740.000000mean 76.178108std 15.597381min 43.00000025% 65.00000050% 74.50000075% 85.000000max 135.000000Name: weight, dtype: float64 .describe() danner følgende mål:
 count: Antal svar ekskl. missing mean: Middelværdien std: Standardafvigelsen min: Minimumværdien 25%: 1.</description>
    </item>
    
    <item>
      <title>Litteratur</title>
      <link>/supplerende/litteratur/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/supplerende/litteratur/</guid>
      <description>McKinney, W 2018: Python for Data Analysis, kapitel 5, side 125-167
  McKinney, W 2018: Python for Data Analysis, kapitel 9, side 257-292
  McKinney, W 2018: Python for Data Analysis, kapitel 12, side 369-378
  </description>
    </item>
    
    <item>
      <title>Subsetting (draft)</title>
      <link>/datah%C3%A5ndtering/subsetting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/datah%C3%A5ndtering/subsetting/</guid>
      <description>Subsetting&amp;rdquo; vil sige at udvælge specifikke dele af data.
Man subsetter pandas med metoderne .loc() og .iloc(). .loc() bruges til at subsette ud fra række- og kolonnenavne, mens .iloc() bruges til at subsette ud fra række- og kolnneindeks.
Format for subsetting: data.loc[rækker, kolonner]
Selekter bestemte rækker:
ess2014.loc[2:10, :] {[{TABLE 3}]}
Selekter bestemte kolonner (specificeres som en liste):
ess2014.loc[:, [&amp;#39;gndr&amp;#39;, &amp;#39;alcfreq&amp;#39;]].head() {[{TABLE 4}]}
Selekter bestemte rækker og kolonner:
ess2014.loc[2:10, [&amp;#39;gndr&amp;#39;, &amp;#39;alcfreq&amp;#39;]] {[{TABLE 5}]}</description>
    </item>
    
    <item>
      <title>Typer af kategoriske variable (nominal, ordinal)</title>
      <link>/kategoriske/typer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kategoriske/typer/</guid>
      <description>Man adskiller mellem to typer af kategoriske variable.
Ordinale
Ordinalt skalerede variable er variable, som kan rangordnes; altså hvor der kan differentieres hierarkisk mellem værdierne.
Af ESS2014 datasættet er health et eksempel på en ordinal-skaleret variabel.
ess2014[&amp;#39;health&amp;#39;].unique() array([&#39;Very good&#39;, &#39;Good&#39;, &#39;Bad&#39;, &#39;Fair&#39;, &#39;Very bad&#39;, nan], dtype=object) Variablen indeholder personens egen vurdering af helbred.
Den er kategorisk, da man kun kan vælge mellem i forvejen definerede svarmuligheder.
Den er ordinal, da man kan rangere værdierne: &amp;ldquo;Good&amp;rdquo; er bedre end &amp;ldquo;Bad&amp;rdquo;, &amp;ldquo;Very bad&amp;rdquo; er værre end &amp;ldquo;Fair&amp;rdquo; osv.</description>
    </item>
    
    <item>
      <title>Introduktion til pandas</title>
      <link>/data/introduktion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/data/introduktion/</guid>
      <description>Pakken pandas (https://pandas.pydata.org/) er et Python bibliotek til datahåndtering og dataanalyse. Pandas egner sig særligt til data i tabeller struktureret i rækker og kolonner. En datatabel kaldes inden for pandas en &amp;ldquo;DataFrame&amp;rdquo;; et bestemt Python objekt specifikt til at lagre og bearbejde data i tabeller.
Denne lektion gennemgår diverse basale funktioner til at indlæse, udforske og håndtere en pandas DataFrame. Se også den officielle dokumentation for flere guides, introduktioner og beskrivelser til at arbejde med pandas: https://pandas.</description>
    </item>
    
    <item>
      <title>Kategoriske variable i Python</title>
      <link>/kategoriske/kategoriske/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/kategoriske/kategoriske/</guid>
      <description>Python/Pandas kan ikke selv gætte sig til, hvad der er kategorisk, da de blot ligner tekst, set fra Pythons synspunkt.
Når man arbejder med kategoriske variable i Python, skal man derfor selv kode dem om til at være kategorisk
Variable kodes til kategoriske med astype(&#39;category&#39;). Herunder kodes health om til kategorisk, da det er en kategorisk variabel:
ess2014[&amp;#39;health&amp;#39;] = ess2014[&amp;#39;health&amp;#39;].astype(&amp;#39;category&amp;#39;) Når man kigger på variablen nu ses, at den er ændret til typen category.</description>
    </item>
    
    <item>
      <title>Nyttige links</title>
      <link>/supplerende/nyttige/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/supplerende/nyttige/</guid>
      <description>DataCamp: Python for Data Science Cheat Sheet - Pandas Basics** - https://datacamp-community-prod.s3.amazonaws.com/dbed353d-2757-4617-8206-8767ab379ab3
The Pandas Development Team: 10 Minutes to Pandas - https://pandas.pydata.org/docs/user_guide/10min.html#min
Waskom, Michael: An introduction to seaborn - https://seaborn.pydata.org/introduction.html</description>
    </item>
    
    <item>
      <title>Variabelgenerering og rekodning (draft)</title>
      <link>/datah%C3%A5ndtering/variabelgenerering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/datah%C3%A5ndtering/variabelgenerering/</guid>
      <description>Variabelgenerering
Ofte har man brug for at tilføje oplysninger til et datasæt i form af nye variable.
Man danner en ny variabel blot ved at referere til et kolonnenavn, som endnu ikke er brugt.
I nedenstående dannes height_m; en variabel for højde i meter:
ess2014[&amp;#39;height_m&amp;#39;] = ess2014[&amp;#39;height&amp;#39;] / 100 ess2014.head() {[{TABLE 11}]}
 ØVELSE: Dan en aldersvariabel Tilføj en aldersvariabel til ESS2014DK datasættet (husk at data er fra 2014)
Løsningess2014[&amp;#39;age&amp;#39;] = 2014 - ess2014[&amp;#39;yrbrn&amp;#39;] ess2014.</description>
    </item>
    
    <item>
      <title>Visualisering af data med seaborn</title>
      <link>/udforsk/visualisering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/udforsk/visualisering/</guid>
      <description>En god måde at udforske sit datasæt er ved at anvende visualiseringer. På den måde kan man visuelt orientere sig i, hvad data indeholder og hvordan data fordeler sig.
I dette afsnit bruges pakken seaborn til at danne visualiseringer. seaborn bygger ovenpå matplotlib, men giver visualiseringerne et mere moderne udseende, og giver flere muligheder for at passe visualiseringen til.
Fordi seaborn bygger ovenpå matplotlib skal begge biblioteker importeres (læg mærke til importkonventionerne).</description>
    </item>
    
    <item>
      <title>Variabeltyper</title>
      <link>/data/variabeltyper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/data/variabeltyper/</guid>
      <description>Man adskiller overordnet mellem to typer af variable; særligt inden for strukuterede datasæt: kontinuerlige og kategoriske.
Kontinuerlige variable Kontinuerlige variable kan tage en nærmest uafgrænset mængde af forskellige numeriske værdier, hvor man ikke i forvejen kan afgrænse, hvilke værdier, som variablen kan antage. Indkomst, vægt og alder er eksempler på kontinuerlige variable. Selvfølgelig er der værdier, som disse variable ikke kan tage - fx negative værdier - men man kan med disse variable ikke vide i forvejen, hvilke værdier, man vil ende ud med.</description>
    </item>
    
    <item>
      <title>Variabeltyper (numerisk og tekst)</title>
      <link>/datah%C3%A5ndtering/variabeltyper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/datah%C3%A5ndtering/variabeltyper/</guid>
      <description>Ligesom Python generelt adskiller mellem typer af objekter, har hver kolonne (series) i en data frame også en type.
Typen kan tjekkes med .dtypes; enten for hele datasættet eller en enkelt kolonne.
ess2014[&amp;#39;height&amp;#39;].dtypes dtype(&#39;float64&#39;) ess2014.dtypes idno int64ppltrst objecthappy objecthealth objectcgtsday float64alcfreq objectheight float64weight float64gndr objectyrbrn int64height_m float64age int64height_cat categorysmoker objectdtype: object Af ovenstående ses at datasættet indeholder typerne int64 (integer/heltal), float64 (&amp;ldquo;float point&amp;rdquo;/decimaltal) og object.</description>
    </item>
    
  </channel>
</rss>